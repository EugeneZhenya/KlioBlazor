@page "/live"
@using System.Net
@using System.IO.Compression
@using System.Text
@using System.Xml.Serialization
@using System.Xml.Linq
@attribute [StreamRendering]
@inject IJSRuntime js
@inject NavigationManager NavManager
@implements IDisposable

<PageTitle>@allMeta.Title</PageTitle>

<MetaContent MetaData="allMeta" />

<BreadcrumbArea>
    <TitleContent>
        <h2 class="title">Пряма <span>трансляція</span></h2>
    </TitleContent>
    <ChildContent>
        <li class="breadcrumb-item"><a href="">Домівка</a></li>
        <li class="breadcrumb-item active" aria-current="page">Наживо</li>
    </ChildContent>
</BreadcrumbArea>

<!-- live-area -->
<section class="episode-area episode-bg" style="background-image: url('img/episode_bg.jpg')">
    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <div class="movie-episode-wrap">
                    <div class="episode-top-wrap">
                        <div class="section-title">
                            <span class="sub-title">Потокова трансляція</span>
                            <h2 class="title">Програма передач</h2>
                        </div>
                        <!--
                        <div class="total-views-count">
                            <p>19 <i class="fa-regular fa-eye"></i></p>
                        </div>
                        -->
                    </div>
                    <div class="episode-watch-wrap">
                        <Accordion ShowCardBody="true" IsCollapsible="false" Percentage="curPercent">
                            <CardHeaderTitle>
                                @if (selProgrammes.Count > 0)
                                {
                                    <span class="season">@StringUtilities.FirstCharToUpper(selProgrammes[0].Title.Text)</span>
                                    <span class="video-count">@NowOrNot</span>
                                }
                                else
                                {
                                    <span class="season">Програма передач наразі недоступна</span>
                                }
                            </CardHeaderTitle>
                            <CardBody>
                                <ul>
                                    @if (selProgrammes.Count > 0)
                                    {
                                        <ul>
                                            @foreach (var prog in selProgrammes)
                                            {
                                                try
                                                {
                                                    <li>
                                                        <a>
                                                            @prog.StartDatetIme.ToString("HH:mm")
                                                            <i class="fa-solid fa-play"></i>
                                                            @prog.TitleBrief
                                                        </a>
                                                        <span class="duration">
                                                            <i class="fa-regular fa-clock"></i> @GetDuration(prog.StartDatetIme, prog.StopDatetIme) хв
                                                        </span>
                                                    </li>
                                                    @if (prog == selProgrammes[4])
                                                    {
                                                        break;
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                    break;
                                                }
                                            }
                                        </ul>
                                    }
                                </ul>
                            </CardBody>
                        </Accordion>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="episode-img">
                    <div id="player"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="movie-history-wrap">
                    <h3 class="title">
                        @for (int i = 0; i < curTitle.Length; i++)
                        {
                            if (i % 2 == 0)
                            {
                                @curTitle[i]
                            }
                            else
                            {
                                <span>@curTitle[i]</span>
                            }
                        }
                    </h3>
                    <p>
                        @curDesc
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- live-area-end -->

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    OpenGraphModel allMeta = new OpenGraphModel();
    TV allProgrames;
    List<Programme> selProgrammes = new List<Programme>();
    Timer timer;

    int curPercent = 0;
    string[] curTitle = [];
    string curDesc = string.Empty;
    string NowOrNot = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        allMeta.Title = "Наживо :: Український медійний архів 'KLIO'";
        allMeta.Description = "Медійний архів 'KLIO': Музика, література, історія, фільми, мультфільми, серіали, мультсеріали, наживо, пряма трансляція, дивитися он-лайн";
        allMeta.Robots = "all";
        allMeta.Author = "Eugene Baklanov";
        allMeta.Keywords = "Klio, архів, video, відео, історія, література, політика, музика, music, наживо, трансляція, пряма трансляція, дивитися он-лайн, фільм, серіал, сезон, епізод, мультфільм, мультсерал";
        allMeta.Type = "article";
        allMeta.Image = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("https://", "http://");
        allMeta.SecureImage = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("http://", "https://");
        allMeta.ImageWidth = 1920;
        allMeta.ImageHeight = 1077;
        allMeta.ImageType = "image/jpeg";
        allMeta.Url = NavManager.Uri;
        allMeta.SiteName = "Медійний архів 'KLIO'";
        allMeta.Locale = "uk_UA";
        allMeta.FBAdmins = "100007730161243,100002204709179";
        allMeta.FBAppId = "885986785210347";
        allMeta.Image2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("https://", "http://");
        allMeta.SecureImage2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("http://", "https://");
        allMeta.ImageWidth2 = 750;
        allMeta.ImageHeight2 = 750;
        allMeta.ImageType2 = "image/png";

        WebClient Client = new WebClient();
        using (MemoryStream stream = new MemoryStream(Client.DownloadData(AppState.KlioStreamEPG)))
        {
            stream.Seek(0, SeekOrigin.Begin);

            using (var gzStream = new GZipStream(stream, CompressionMode.Decompress))
            {
                using (var outputStream = new MemoryStream())
                {
                    gzStream.CopyTo(outputStream);
                    byte[] outputBytes = outputStream.ToArray();
                    string FileContents = Encoding.UTF8.GetString(outputBytes);
                    string _byteOrderMarkUtf8 = Encoding.UTF8.GetString(Encoding.UTF8.GetPreamble());
                    FileContents = FileContents.Remove(0, _byteOrderMarkUtf8.Length);

                    try
                    {
                        var doc = XDocument.Parse(FileContents);
                        XmlSerializer serializer = new XmlSerializer(typeof(TV));
                        allProgrames = (TV)serializer.Deserialize(doc.CreateReader());

                        UpdateCurState();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }

            timer = new Timer(new TimerCallback(_ =>
            {
                UpdateCurState();
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }), null, 1000, 1000);
        }
    }

    void UpdateCurState()
    {
        selProgrammes = allProgrames.Programmes.Where(x => x.StopDatetIme >= DateTime.Now).ToList();
        if (selProgrammes.Count > 0)
        {
            if (selProgrammes[0].Title.Text.StartsWith("т/с ") || selProgrammes[0].Title.Text.StartsWith("х/ф ") || selProgrammes[0].Title.Text.StartsWith("д/с ") || selProgrammes[0].Title.Text.StartsWith("д/ф "))
            {
                curTitle = StringUtilities.SeparateString(selProgrammes[0].Title.Text.Substring(4, selProgrammes[0].Title.Text.Length - 4));
            }
            else
            {
                curTitle = StringUtilities.SeparateString(selProgrammes[0].Title.Text);
            };
            curDesc = selProgrammes[0].Desc.Text;

            var TotalSeconds = (selProgrammes[0].StopDatetIme - selProgrammes[0].StartDatetIme).TotalSeconds;
            var NowSeconds = (DateTime.Now - selProgrammes[0].StartDatetIme).TotalSeconds;
            curPercent = (int)Math.Round(NowSeconds / TotalSeconds * 100);
            if (curPercent < 0)
            {
                curPercent = 0;
                NowOrNot = "Незабаром";
            }
            else
            {
                NowOrNot = "В етері зараз";
            }
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await InitPlayer();
        }
    }

    async Task InitPlayer()
    {
        await js.InvokeVoidAsync("playerInit", "player", AppState.KlioStreamUrl, AppState.KlioStreamPoster, "", 0);
    }

    int GetDuration(DateTime start, DateTime stop)
    {
        var diffInSeconds = (stop - start).TotalMinutes;
        return (int)Math.Round(diffInSeconds, MidpointRounding.AwayFromZero);
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
    }
}
