@page "/Home"
@page "/Home/{CatName}"
@inject NavigationManager NavManager
@inject ICategoryRepository categoryRepository
@inject CurrentCategory currentCategory
@implements IDisposable

<PageTitle>@allMeta.Title</PageTitle>

<MetaContent MetaData="allMeta" />

@if (lastMovie != null)
{
    <BannerArea ShowMovie="lastMovie" ShowMovieCountries="lastMovieCountries" />
}

@if (CatName == "all")
{
    <section class="ucm-area ucm-bg" style="background-image: url('img/ucm_bg_shape.png')">
        <div class="layer">
            <div class="container">
                <div class="row align-items-end mb-55">
                    <div class="col-lg-6">
                        <div class="section-title text-center text-lg-start title-style-two">
                            <span class="sub-title">Категорії</span>
                            <h2 class="title">Список категорій</h2>
                        </div>
                    </div>
                </div>
                <div class="tab-content">
                    <div class="tab-pane fade show active">
                        <div class="ucm-active" style="display: -webkit-flex; -webkit-flex-direction: column; -webkit-flex-wrap: wrap; -webkit-flex-direction: row;">
                            <GenericList List="Categories">
                                <WholeListTemplate>
                                    <div class="widget blog-widget" style="width: 100%;">
                                        <div class="sidebar-cat">
                                            <ul>
                                                @foreach (var item in Categories)
                                                {
                                                    <li style="height: 75px;">
                                                        <div class="row" style="align-items: stretch; width: 100%; float: left;">
                                                            <div style="width: 65%; align-self: center;">
                                                                <a href="@GetCatUrl(item)">@item.Name</a> <span>@item.Partitions.Count() розд.</span>
                                                            </div>
                                                            <AuthorizeView Roles="Admin">
                                                                <Authorized>
                                                                    <div style="width: 35%; text-align: right;">
                                                                        <a class="btn" onmouseover="this.style.color='#1e1b29';" onmouseout="this.style.color='#c8c8c8';" href="category/edit/@item.Id">Редагувати</a>
                                                                        <button class="btn" @onclick="@(() => DeletCategory(item))">Видалити</button>
                                                                    </div>
                                                                </Authorized>
                                                            </AuthorizeView>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </WholeListTemplate>
                            </GenericList>
                        </div>
                    </div>
                </div>
            </div>

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <div class="container">
                        <div class="row">
                            <div class="col-xl-12 col-lg-11">
                                <div class="contact-form-wrap mt-5">
                                    <div class="contact-form" style="text-align: right;">
                                        <a class="btn" href="category/create">Додати</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>
    </section>
}
else
{
    @if (lastMovie != null)
    {
        <PartitionsArea Partitions="Partitions" Title="@lastMovie.Partition.Category.Name" Subtitle="Розділи категорії" ShowCategoryName="false" />
    }
}

<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm">
    <div>Ви впевнені, що хочете видалити категорію: "@categoryToBeDeleted.Name"?</div>
</Confirmation>

@code {
    [Parameter] public string CatName { get; set; }
    OpenGraphModel allMeta = new OpenGraphModel();
    private Movie lastMovie;
    private List<Country> lastMovieCountries;
    private List<Category> Categories;
    private List<Partition> Partitions;
    Confirmation confirmation;
    Category categoryToBeDeleted;

    protected async override Task OnInitializedAsync()
    {
        NavManager.LocationChanged += LocationChanged;

        if (string.IsNullOrEmpty(CatName)) {
            CatName = "all";
        }
        currentCategory.SetCurrentCategory(GetCatId(CatName));

        allMeta.Title = "Категорії :: Український медійний архів 'KLIO'";
        allMeta.Description = "Медійний архів 'KLIO': Музика, література, історія, фільми, мультфільми, серіали, мультсеріали, наживо, пряма трансляція, дивитися он-лайн";
        allMeta.Robots = "all";
        allMeta.Author = "Eugene Baklanov";
        allMeta.Keywords = "Klio, архів, video, відео, історія, література, політика, музика, music, наживо, трансляція, пряма трансляція, дивитися он-лайн, фільм, серіал, сезон, епізод, мультфільм, мультсерал";
        allMeta.Type = "article";
        allMeta.Image = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("https://", "http://");
        allMeta.SecureImage = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("http://", "https://");
        allMeta.ImageWidth = 1920;
        allMeta.ImageHeight = 1077;
        allMeta.ImageType = "image/jpeg";
        allMeta.Url = NavManager.Uri;
        allMeta.SiteName = "Медійний архів 'KLIO'";
        allMeta.Locale = "uk_UA";
        allMeta.FBAdmins = "100007730161243,100002204709179";
        allMeta.FBAppId = "885986785210347";
        allMeta.Image2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("https://", "http://");
        allMeta.SecureImage2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("http://", "https://");
        allMeta.ImageWidth2 = 750;
        allMeta.ImageHeight2 = 750;
        allMeta.ImageType2 = "image/png";

        try
        {
            var response = await categoryRepository.GetCategoryByName(CatName);
            lastMovie = response.LastMovie;
            lastMovieCountries = response.LastMovieCountries;
            Categories = response.AllCategories;
            Partitions = response.CategoryPartitions;

            if (lastMovie != null)
            {
                allMeta.Title = lastMovie.Partition.Category.Name + " :: Український медійний архів 'KLIO'";
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task DeletCategory(Category category)
    {
        categoryToBeDeleted = category;
        confirmation.Show();
    }

    private async Task OnConfirm()
    {
        await categoryRepository.DeleteCategory(categoryToBeDeleted.Id);
        Categories = await categoryRepository.GetAllCategories();
        confirmation.Hide();
        categoryToBeDeleted = null;
    }

    void OnCancel()
    {
        confirmation.Hide();
        categoryToBeDeleted = null;
    }

    private string GetCatUrl(Category category)
    {
        string url = "Home";
        switch (category.Id)
        {
            case 1:
                url += "/history";
                break;
            case 2:
                url += "/literacy";
                break;
            case 3:
                url += "/music";
                break;
            case 4:
                url += "/movies";
                break;
            case 5:
                url += "/serials";
                break;
            case 6:
                url += "/animation";
                break;
            case 7:
                url += "/series";
                break;
        }

        return url;
    }

    private int GetCatId(string name)
    {
        int catId = 0;

        switch (name)
        {
            case "history":
                catId = 1;
                break;
            case "literacy":
                catId = 2;
                break;
            case "music":
                catId = 3;
                break;
            case "movies":
                catId = 4;
                break;
            case "serials":
                catId = 5;
                break;
            case "animation":
                catId = 6;
                break;
            case "series":
                catId = 7;
                break;
        }

        return catId;
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        NavManager.NavigateTo(NavManager.Uri, true);
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        NavManager.LocationChanged -= LocationChanged;
    }
}
