@page "/movies/search"
@attribute [StreamRendering]
@inject NavigationManager NavManager
@inject IMoviesRepository moviesRepository
@inject IGenreRepository genreRepository

<PageTitle>@allMeta.Title</PageTitle>

<MetaContent MetaData="allMeta" />

<BreadcrumbArea>
    <TitleContent>
        <h2 class="title">Пошук <span>фільмів</span></h2>
    </TitleContent>
    <ChildContent>
        <li class="breadcrumb-item"><a href="">Домівка</a></li>
        <li class="breadcrumb-item active" aria-current="page">Пошук</li>
    </ChildContent>
</BreadcrumbArea>

<!-- contact-area -->
<section class="contact-area contact-bg" style="background-image: url('img/contact_bg.jpg')">
    <div class="container">
        <div class="row">
                <div class="col-xl-12 col-lg-11">
                    <div class="contact-form-wrap">
                        <div class="widget-title mb-50">
                            <h5 class="title">Пошук фільмів</h5>
                        </div>
                        <EditForm Model="filterMoviesDTO">
                            <div class="contact-form">
                                <div class="col-md-12">
                                    <input type="text" placeholder="Назва фільму..." id="title" @bind-value="filterMoviesDTO.Title" @bind-value:event="oninput"
                                           @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))">
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <select @bind="filterMoviesDTO.GenreId">
                                            <option value="0">
                                                -- Виберіть жанр
                                            </option>
                                            @foreach (var genre in Genres)
                                        {
                                            <option value="@genre.Id">@genre.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6" style="text-align: end;">
                                    <button type="button" class="btn" @onclick="Clear">Очистити</button>
                                    <button type="button" class="btn" @onclick="SearchForMovies">Шукати</button>
                                </div>
                            </div>
                        </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
</section>
<!-- contact-area-end -->

<UpComingMovieArea Movies="Movies" Title="@titleDisplay" Subtitle="Результати пошуку" NoRecords="Нічого не знайдено" />

<Pagination CurrentPage="filterMoviesDTO.Page" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage" />

@code {
    OpenGraphModel allMeta = new OpenGraphModel();
    private FilterMoviesDTO filterMoviesDTO = new FilterMoviesDTO();
    string titleDisplay = "";
    private int totalAmountPages;
    private List<Genre> Genres = new List<Genre>();
    private List<Movie> Movies;

    protected async override Task OnInitializedAsync()
    {
        allMeta.Title = "Пошук фільмів :: Український медійний архів 'KLIO'";
        allMeta.Description = "Медійний архів 'KLIO': Музика, література, історія, фільми, мультфільми, серіали, мультсеріали, наживо, пряма трансляція, дивитися он-лайн";
        allMeta.Robots = "all";
        allMeta.Author = "Eugene Baklanov";
        allMeta.Keywords = "Klio, архів, video, відео, історія, література, політика, музика, music, наживо, трансляція, пряма трансляція, дивитися он-лайн, фільм, серіал, сезон, епізод, мультфільм, мультсерал";
        allMeta.Type = "article";
        allMeta.Image = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("https://", "http://");
        allMeta.SecureImage = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("http://", "https://");
        allMeta.ImageWidth = 1920;
        allMeta.ImageHeight = 1077;
        allMeta.ImageType = "image/jpeg";
        allMeta.Url = NavManager.Uri;
        allMeta.SiteName = "Медійний архів 'KLIO'";
        allMeta.Locale = "uk_UA";
        allMeta.FBAdmins = "100007730161243,100002204709179";
        allMeta.FBAppId = "885986785210347";
        allMeta.Image2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("https://", "http://");
        allMeta.SecureImage2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("http://", "https://");
        allMeta.ImageWidth2 = 750;
        allMeta.ImageHeight2 = 750;
        allMeta.ImageType2 = "image/png";

        filterMoviesDTO.Title = "";
        var queryString = NavManager.GetQueryStrings(NavManager.Uri);
        Genres = await genreRepository.GetAllGenres();
        Genres = Genres.OrderBy(x => x.Name).ToList();
        if (queryString != null)
        {
            FillFilterWithQueryStrings(queryString);
        }
        await LoadMovies();
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            filterMoviesDTO.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            filterMoviesDTO.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("page"))
        {
            filterMoviesDTO.Page = int.Parse(queryStrings["page"]);
        }
    }

    private async Task SelectedPage(int page)
    {
        filterMoviesDTO.Page = page;
        await LoadMovies();
    }

    private async Task LoadMovies()
    {
        var quesryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(quesryString))
        {
            quesryString = $"?{quesryString}";
            if (NavManager.ToBaseRelativePath(NavManager.Uri) != ("movies/search" + quesryString))
            {
                NavManager.NavigateTo("movies/search" + quesryString);
            }
        }
        Movies = null;
        var pagenatedResponse = await moviesRepository.GetMoviesFiltered(filterMoviesDTO);
        Movies = pagenatedResponse.Response;
        totalAmountPages = pagenatedResponse.TotalAmountPages;
        StateHasChanged();
    }

    private string GenerateQueryString()
    {
        var queryStringDict = new Dictionary<string, string>();
        queryStringDict["genreId"] = filterMoviesDTO.GenreId.ToString();
        queryStringDict["title"] = filterMoviesDTO.Title ?? "";
        queryStringDict["page"] = filterMoviesDTO.Page.ToString();

        var defaultValues = new List<string>() { "", "0" };

        return string.Join("&", queryStringDict
            .Where(x => !defaultValues.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchForMovies();
        }
    }

    private async Task SearchForMovies()
    {
        await LoadMovies();
    }

    private async Task Clear()
    {
        filterMoviesDTO.Title = "";
        filterMoviesDTO.GenreId = 0;
        titleDisplay = filterMoviesDTO.Title;
        await LoadMovies();
    }
}
