@page "/movies/edit/{MovieId:int}"
@inject NavigationManager NavManager
@inject IMoviesRepository moviesRepository

<PageTitle>@allMeta.Title</PageTitle>

<MetaContent MetaData="allMeta" />

<BreadcrumbArea>
    <TitleContent>
        <h2 class="title">Додати <span>відео</span></h2>
    </TitleContent>
    <ChildContent>
        <li class="breadcrumb-item"><a href="">Домівка</a></li>
        <li class="breadcrumb-item"><a href="Home/movies">Відео</a></li>
        <li class="breadcrumb-item active" aria-current="page">Редагувати відео</li>
    </ChildContent>
</BreadcrumbArea>

@if (Movie != null)
{
    <section class="contact-area contact-bg" style="background-image: url('img/contact_bg.jpg')">
        <div class="container">
            <div class="row">
                <div class="col-xl-12 col-lg-11">
                    <div class="contact-form-wrap">
                        <div class="widget-title mb-50">
                            <h5 class="title">Редагувати відео</h5>
                        </div>
                        <div class="contact-form">
                            @if (Movie != null)
                            {
                                <MovieForm Movie="Movie" OnValidSubmit="Edit"
                                           NotSelectedGenres="NotSelectedGenres" SelectedGenres="SelectedGenres"
                                           NotSelectedCountries="NotSelectedCountries" SelectedCountries="SelectedCountries"
                                           AllPartitions="allPartitions" CategoryList="allCategories" MovieInfos="SelectedInfos"
                                           SelectedActors="SelectedActors" SelectedCreators="SelectedCreators" SelectedKeywords="SelectedKeywords" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@code {
    [Parameter] public int MovieId { get; set; }
    OpenGraphModel allMeta = new OpenGraphModel();
    private Movie Movie;
    private List<Genre> NotSelectedGenres;
    private List<Genre> SelectedGenres;
    private List<Person> SelectedActors;
    private List<Creator> SelectedCreators;
    private List<Keyword> SelectedKeywords;
    private List<MovieInfo> SelectedInfos;
    private List<Category> allCategories;
    private List<Partition> allPartitions;
    private List<Country> NotSelectedCountries;
    private List<Country> SelectedCountries;

    protected async override Task OnInitializedAsync()
    {
        allMeta.Title = "Редагувати відео :: Український медійний архів 'KLIO'";
        allMeta.Description = "Медійний архів 'KLIO': Музика, література, історія, фільми, мультфільми, серіали, мультсеріали, наживо, пряма трансляція, дивитися он-лайн";
        allMeta.Robots = "all";
        allMeta.Author = "Eugene Baklanov";
        allMeta.Keywords = "Klio, архів, video, відео, історія, література, політика, музика, music, наживо, трансляція, пряма трансляція, дивитися он-лайн, фільм, серіал, сезон, епізод, мультфільм, мультсерал";
        allMeta.Type = "article";
        allMeta.Image = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("https://", "http://");
        allMeta.SecureImage = (NavManager.BaseUri + "img/WatchTVMockup.jpg").Replace("http://", "https://");
        allMeta.ImageWidth = 1920;
        allMeta.ImageHeight = 1077;
        allMeta.ImageType = "image/jpeg";
        allMeta.Url = NavManager.Uri;
        allMeta.SiteName = "Медійний архів 'KLIO'";
        allMeta.Locale = "uk_UA";
        allMeta.FBAdmins = "100007730161243,100002204709179";
        allMeta.FBAppId = "885986785210347";
        allMeta.Image2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("https://", "http://");
        allMeta.SecureImage2 = (NavManager.BaseUri + "img/logo_750_transp.png").Replace("http://", "https://");
        allMeta.ImageWidth2 = 750;
        allMeta.ImageHeight2 = 750;
        allMeta.ImageType2 = "image/png";

        var model = await moviesRepository.GetMovieForUpdate(MovieId);
        SelectedActors = model.Actors;
        SelectedCreators = model.Creators;
        SelectedKeywords = model.Keywords;
        SelectedInfos = model.MovieInfos;
        allCategories = model.AllCategories;
        allPartitions = model.AllPartitions;
        SelectedGenres = model.SelectedGenres;
        NotSelectedGenres = model.NotSelectedGenres;
        SelectedCountries = model.SelectedCountries;
        NotSelectedCountries = model.NotSelectedCountries;
        Movie = model.Movie;
    }

    private async Task Edit()
    {
        await moviesRepository.UpdateMovie(Movie);
        NavManager.NavigateTo($"movie/{Movie.Id}/{StringUtilities.Translit(Movie.Title)}");
    }
}
