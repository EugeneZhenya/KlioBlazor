@page "/weather"
@attribute [StreamRendering]
@inject SingletonService singleton

<PageTitle>Weather</PageTitle>

<BannerArea />

<!-- up-coming-movie-area -->
<section class="ucm-area ucm-bg" style="background-image: url('img/service-bg.jpg')">
    <div class="container">
        <div>
            <h3>Weather</h3>

            <div class="row g-3">
                <div style="width: 150px;">
                    <select @bind="AppState.Color" class="form-control">
                        <option value="#2B96CC">Blue</option>
                        <option value="#fd0e30">Red</option>
                        <option value="#e4d804">Yellow</option>
                    </select>
                </div>

                <div style="width: 150px;">
                    <select @bind="AppState.Size" class="form-control">
                        <option value="12px">12px</option>
                        <option value="16px">16px</option>
                        <option value="28px">28px</option>
                    </select>
                </div>
            </div>

            <p>This component demonstrates showing data.</p>

            <p style="color: @AppState.Color; font-size: @AppState.Size;">Singleton count: @singleton.Value</p>

            @if (forecasts == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Temp. (C)</th>
                            <th>Temp. (F)</th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecasts)
                        {
                            <tr>
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>@forecast.TemperatureC</td>
                                <td>@forecast.TemperatureF</td>
                                <td>@forecast.Summary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

            <MoviesList Movies="movies" />
        </div>
    </div>
</section>
<!-- up-coming-movie-area-end -->

@code {
    [CascadingParameter] public AppState AppState { get; set; }
    private WeatherForecast[]? forecasts;
    private List<Movie> movies;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        movies = new List<Movie>()
        {
            new Movie() {Title = "Joker", ReleaseDate = new DateTime(2023, 12, 11)},
            new Movie() {Title = "Avenger", ReleaseDate = new DateTime(2023, 12, 23)}
        };

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
