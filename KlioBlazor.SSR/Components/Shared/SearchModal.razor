@inject IJSRuntime js

<!-- Modal Search -->
<div class="modal @ModalClass" id="search_modal" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form>
                <input type="text" @bind-value="searchText" placeholder="Шукати..." @bind-value:event="oninput"
                       @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))">
                <button @onclick="SearchMovie">
                    <i class="fa-solid fa-magnifying-glass"></i>
                </button>
            </form>
        </div>
    </div>
    <button data-dismiss="modal" @onclick="() => Close()">
        <i class="fa-regular fa-circle-xmark"></i>
    </button>
</div>
<!-- Modal Search-end -->
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private string searchText;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    [JSInvokable]
    private async Task SearchMovie()
    {
        await js.InvokeVoidAsync("redirectToUrl", "movies/search?title=" + HttpUtility.UrlEncode(searchText));
    }

    private async Task TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchMovie();
        }
    }
}
